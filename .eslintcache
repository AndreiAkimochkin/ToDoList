[{"C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\app\\store.ts":"1","C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\features\\Login.tsx":"2","C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"3","C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\utils\\error-utils.ts":"4","C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"5","C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\app\\App.tsx":"6","C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\components\\EditableSpan\\EditableSpan.tsx":"7"},{"size":1097,"mtime":1597327450000,"results":"8","hashOfConfig":"9"},{"size":3018,"mtime":1612002075837,"results":"10","hashOfConfig":"9"},{"size":1092,"mtime":1596716576000,"results":"11","hashOfConfig":"9"},{"size":811,"mtime":1596719330000,"results":"12","hashOfConfig":"9"},{"size":1773,"mtime":1596295538000,"results":"13","hashOfConfig":"9"},{"size":1794,"mtime":1611996835947,"results":"14","hashOfConfig":"9"},{"size":952,"mtime":1594154724000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hslfvr",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\app\\store.ts",[],"C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\features\\Login.tsx",["32"],"C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],["33","34"],"C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\utils\\error-utils.ts",[],"C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["35","36","37"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\app\\App.tsx",[],"C:\\Users\\Zver\\Documents\\Projects\\TodoList\\src\\components\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"38","severity":1,"message":"39","line":50,"column":28,"nodeType":"40","endLine":50,"endColumn":45},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":15,"column":97,"nodeType":"47","endLine":15,"endColumn":130,"suggestions":"48"},{"ruleId":"45","severity":1,"message":"46","line":20,"column":8,"nodeType":"47","endLine":20,"endColumn":41,"suggestions":"49"},{"ruleId":"45","severity":1,"message":"46","line":24,"column":8,"nodeType":"47","endLine":24,"endColumn":41,"suggestions":"50"},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["53"],["54"],["55"],"no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},{"desc":"56","fix":"58"},{"desc":"56","fix":"59"},"Update the dependencies array to be: [props]",{"range":"60","text":"61"},{"range":"62","text":"61"},{"range":"63","text":"61"},[765,798],"[props]",[1071,1104],[1261,1294]]